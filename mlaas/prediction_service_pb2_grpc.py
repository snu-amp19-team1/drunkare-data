# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import prediction_service_pb2 as prediction__service__pb2


class PredictionStub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.NewData = channel.unary_unary(
        '/prediction.Prediction/NewData',
        request_serializer=prediction__service__pb2.RawData.SerializeToString,
        response_deserializer=prediction__service__pb2.DataAck.FromString,
        )
    self.InferActivity = channel.unary_unary(
        '/prediction.Prediction/InferActivity',
        request_serializer=prediction__service__pb2.ActivityRequest.SerializeToString,
        response_deserializer=prediction__service__pb2.ActivityResponse.FromString,
        )


class PredictionServicer(object):
  # missing associated documentation comment in .proto file
  pass

  def NewData(self, request, context):
    """Send Data 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def InferActivity(self, request, context):
    """API for activity inference 
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_PredictionServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'NewData': grpc.unary_unary_rpc_method_handler(
          servicer.NewData,
          request_deserializer=prediction__service__pb2.RawData.FromString,
          response_serializer=prediction__service__pb2.DataAck.SerializeToString,
      ),
      'InferActivity': grpc.unary_unary_rpc_method_handler(
          servicer.InferActivity,
          request_deserializer=prediction__service__pb2.ActivityRequest.FromString,
          response_serializer=prediction__service__pb2.ActivityResponse.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'prediction.Prediction', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
